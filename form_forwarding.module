<?php

require_once 'include/portal_connection.inc';
require_once 'include/portal.inc';
/**
 * @file 
 * This Connects a Drupal webform to an Webform Forwarding system
 * @author Stephen Corcoran
 */

/**
 * Implementation of the hook_menu()
 */
function form_forwarding_menu() {
  $items = [];
  $items['admin/config/content/form_forwarding'] = array(
    'title' => 'Webform Forwarding',
    'description' => 'Connect Drupal webforms to a 3rd party form/system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_forwarding_admin_settings'),
    'access arguments' => array('administer formforwarding'),
    'file' => 'form_forwarding.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/form_forwarding/portal'] = array(
    'title' => 'Webform Portal',
    'description' => 'Portal Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_forwarding_portal_admin'),
    'access arguments' => array('administer formforwarding'),
    'file' => 'form_forwarding_portal.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_permission
 */
function form_forwarding_permission() {
  return array(
    'administer formforwarding' => array(
      'title' => t('Administer Webform Forward Portal Control'),
      'description' => t('Access to Webform Forward configuration'),
    ),
  );
}

/**
 * Appends the value to the end of each element in the $inowKeys and incroments 
 * the value. Till the Max number/charactor is reached.
 * @param array $thirdPartyKeys
 * @param string $value ex: 1-9 or a-h
 * @return array
 */
function _inc_gen_file_keys_to($thirdPartyKeys, $value) {
  $elements = explode("-", $value);
  $thirdPartyKeysRtn = array();
  //if the array is NOT empty and the range is numeric add each number in the array to each element in the array.
  if (is_numeric($elements[0]) && is_numeric($elements[1]) &&
      count($thirdPartyKeys) > 0) {
    foreach ($thirdPartyKeys as $thirdPartyKey) {
      for ($i = intval($elements[0]); $i <= intval($elements[1]); $i++) {
        $thirdPartyKeysRtn[] = $thirdPartyKey . strval($i);
      }
    }
  }
  //if the array is empty and the range is numeric add each number in the array
  else if (is_numeric($elements[0]) && is_numeric($elements[1]) &&
      count($thirdPartyKeys) == 0) {
    for ($i = intval($elements[0]); $i <= intval($elements[1]); $i++) {
      $thirdPartyKeysRtn[] = strval($i);
    }
  }
  //if the array is NOT empty and the range is char add each chard in the array to each element in the array.
  else if (count($thirdPartyKeys) > 0) {
    foreach ($thirdPartyKeys as $thirdPartyKey) {
      $currentChar = $elements[0];
      while ($currentChar <= $elements[1]) {
        $thirdPartyKeysRtn[] = $thirdPartyKey . $currentChar;
        ++$currentChar;
      }
    }
  }
  //if the array is empty and the range is charactor add each char in the array
  else if (count($thirdPartyKeys) == 0) {
    $currentChar = $elements[0];
    while ($currentChar <= $elements[1]) {
      $thirdPartyKeysRtn[] = $currentChar;
      ++$currentChar;
    }
  }
  return $thirdPartyKeysRtn;
}

/**
 * Appends the values in the exploded string to the end of each element in the $inowKeys.
 * @param array $thirdPartyKeys
 * @param string $value
 * @return array
 */
function _inc_gen_file_keys_through_list($thirdPartyKeys, $value) {
  $elements = explode(",", $value);
  $inowKeysRtn = array();
  foreach ($thirdPartyKeys as $thirdPartyKey) {
    foreach ($elements as $element) {
      $inowKeysRtn[] = $thirdPartyKey . $element;
    }
  }
  return $inowKeysRtn;
}

/**
 * The value is a Expretion that is ex: [1-5], [a-g], [1,2,3,5,6], or [asd,qwe,zxc]
 * Removes the "[", "]" and then figures out if it is a to "-", or through list ",".
 * @param array $thirdPartyKeys
 * @param string $value
 * @return array
 */
function _inc_gen_file_keys($thirdPartyKeys, $value) {
  $thirdPartyKeysRtn = array();
  $value[0] = "";
  $value[strlen($value) - 1] = "";
  if (strpos($value, "-")) {
    $thirdPartyKeysRtn = _inc_gen_file_keys_to($thirdPartyKeys, trim($value));
  } else if (strpos($value, ",")) {
    $thirdPartyKeysRtn = _inc_gen_file_keys_through_list($thirdPartyKeys, $value);
  }
  return $thirdPartyKeysRtn;
}

/**
 * Takes a string that has a range in it and generates a list of all the avalable keys.
 * @param string $thirdPartyKey
 * @return array
 */
function _gen_file_keys($thirdPartyKey) {
  $thirdPartyKeyArray = explode("/", $thirdPartyKey);
  $thirdPartyKeys = array();
  foreach ($thirdPartyKeyArray as $value) {
    if ($value[0] == '[') {
      $thirdPartyKeys = _inc_gen_file_keys($thirdPartyKeys, $value);
    } else {
      if (count($thirdPartyKeys) > 0) {
        foreach ($thirdPartyKeys as $key => $element) {
          $thirdPartyKeys[$key] = $element . $value;
        }
      } else {
        $thirdPartyKeys[] = $value;
      }
    }
  }
  return $thirdPartyKeys;
}

//function _print_file_keys($inowKey) {
//  $inowKeyArray = explode("/", $inowKey);
//  $inowKeys = array();
//  $inowKeys = _gen_file_keys($inowKeys, $inowKeyArray);
//
//  echo "Initial Value: " . $inowKey . "</br>";
//  echo "</br>";
//  echo "inowKeys Array Size: " . count($inowKeys) . "</br>";
//  echo "</br>";
//  echo "Generated File Keys:" . "</br>";
//  foreach ($inowKeys as $key) {
//    echo $key . "</br>";
//  }
//}
//$regx = "file_/[1,2,3,a,b,c]/_new";
//_print_file_keys($regx);
//echo "</br></br>";
//$regx = "[a-d]/_file_/[1-5]/_new";
//_print_file_keys($regx);
//echo "</br></br>";
//$regx = "file_/[a-f]/_new";
//_print_file_keys($regx);

function _format_submission_data($portal, $submitted_values, $form_values) {
  //dpm($portal);
  //create array of data to be posted
  $post_data = NULL;
  //Add the Defines to the URL params
  for ($i = 0; $i < count($portal['defines']); $i++) {
    $post_data[$portal['defines'][$i]['ikey']] = urlencode($portal['defines'][$i]['ivalue']);
  }
  //Add the connections to the URL params
  for ($i = 0; $i < count($portal['connections']); $i++) {
    if ($submitted_values[$portal['connections'][$i]['dek']] != "") {
      $post_data[$portal['connections'][$i]['iek']] = urlencode($submitted_values[$portal['connections'][$i]['dek']]);
    }
  }
//FILE handle
  #dpm("Temp: " . file_directory_temp());
  for ($i = 0; $i < count($portal['files']); $i++) {
    //dpm($portal['files'][$i]['dek']);
    if (array_key_exists($portal['files'][$i]['dek'], $form_values)) {
      if (is_array($form_values[$portal['files'][$i]['dek']])) {
        //dpm("Multi File...");
        $files = $form_values[$portal['files'][$i]['dek']]["_fids"];
        $inowKeys = _gen_file_keys($portal['files'][$i]['iek']);

        foreach ($files as $key => $file) {
          if(drupal_realpath(file_load($file)->uri) != "") {
            $post_data[$inowKeys[$key]] = '@' . drupal_realpath(file_load($file)->uri);
          }
        }
      } else {
        //dpm('File ' . $i . ' : ' . drupal_realpath(file_load($form_values[$portal['files'][$i]['dek']])->uri));
        //dpm(file_load($submitted_values[$portal['files'][$i]['dek']])->uri);
        if(drupal_realpath(file_load($submitted_values[$portal['files'][$i]['dek']])->uri) != ""){
          $post_data[$portal['files'][$i]['iek']] = '@' . drupal_realpath(file_load($submitted_values[$portal['files'][$i]['dek']])->uri);
        }
      }
    } else {
      #dpm("No File Submission...");
    }
  }
//traverse array and prepare data for posting (key1=value1)
//  foreach ($post_data as $key => $value) {
//    $post_items[] = $key . '=' . $value;
//  }
//create the final string to be posted using implode()
  //$post_string = implode($delimiter, $post_items);
  //watchdog("CMO_PHP", "FORM STRING: " . $post_string);
  return $post_data;
}

/**
 * Posts the data to a php script
 * @param type $portal
 * @param type $submitted_values
 */
function _post_to_php($portal, $submitted_values, $form_values) {
  $useragent = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2';
  $post_string = _format_submission_data($portal, $submitted_values, $form_values);
  //TODO: Try to get the module to submit through PHP vs. a System Call
  //This is using a system aplication to submit the data.
  //$curl = 'curl --form ' . $post_string . ' ' . $portal['submission_url'];
  //watchdog("CMO_PHP", $curl);
  //exec($curl);

  //create cURL connection
  $curl_connection = curl_init();
  //set options
  curl_setopt($curl_connection, CURLOPT_URL, $portal['submission_url']);
  curl_setopt($curl_connection, CURLOPT_POST, 1);
  curl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_connection, CURLOPT_CONNECTTIMEOUT, 30);
  curl_setopt($curl_connection, CURLOPT_USERAGENT, $useragent);
  curl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl_connection, CURLOPT_SSL_VERIFYPEER, true);
  curl_setopt($curl_connection, CURLOPT_FOLLOWLOCATION, 1);
  //set data to be posted
  dpm($post_string);
  curl_setopt($curl_connection, CURLOPT_POSTFIELDS, $post_string);
  //perform our request
  $result = curl_exec($curl_connection);
  dpm($curl_connection);
  //close the connection
  curl_close($curl_connection);
}

/**
 * Post the data to an ASPX form
 * @param type $portal
 * @param type $submitted_values
 */
function _post_to_aspx($portal, $submitted_values, $form_values) {
  $post_string = _format_submission_data($portal, $submitted_values, $form_values, '&');

  $ch = curl_init($portal['submission_url']);
  /**
   * Return the response as a string instead of outputting it to the screen
   */
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $resultaps = curl_exec($ch);
  /**
   * Check for errors
   */
  if (curl_errno($ch)) {
    $resultaps = 'cURL ERROR -> ' . curl_errno($ch) . ': ' . curl_error($ch);
    die(curl_error($ch));
  } else {
    $returnCode = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);
    switch ($returnCode) {
      case 200:
        break;
      default:
        $resultaps = 'HTTP ERROR -> ' . $returnCode;
        break;
    }
  }
  //Read the view state value
  preg_match_all("/id=\"__VIEWSTATE\" value=\"(.*?)\"/", $resultaps, $arr_viewstate);
  $viewstate = urlencode($arr_viewstate[1][0]);
  //Read the event validation value
  preg_match_all("/id=\"__EVENTVALIDATION\" value=\"(.*?)\"/", $resultaps, $arr_validation);
  $eventvalidation = urlencode($arr_validation[1][0]);


  /**
   * Now you can setup the post data and submit the form
   * For example, submit the ItemID = 6
   */
  $options = array(
    CURLOPT_RETURNTRANSFER => true, // return web page
    CURLOPT_HEADER => true, // don't return headers
    CURLOPT_FOLLOWLOCATION => true, // follow redirects
    CURLOPT_ENCODING => "", // handle all encodings
    CURLOPT_USERAGENT => "spider", // who am i
    CURLOPT_AUTOREFERER => true, // set referer on redirect
    CURLOPT_CONNECTTIMEOUT => 120, // timeout on connect
    CURLOPT_TIMEOUT => 120, // timeout on response
    CURLOPT_MAXREDIRS => 10, // stop after 10 redirects
    CURLOPT_POST => true,
    CURLOPT_POSTFIELDS => $post_string, //'__EVENTTARGET=' . urlencode('ItemID') . '&__EVENTARGUMENT=' . urlencode('') . '&__VIEWSTATE=' . $viewstate . '&__EVENTVALIDATION=' . $eventvalidation . '&ItemID=5'
  );
  $ch = curl_init($url);
  curl_setopt_array($ch, $options);
  $resultaps = curl_exec($ch);

  /**
   *  Parse the data example
   *  Read a number 1220
   *  <td class="WorksManageTableContent">1220</td>
   */
  preg_match_all("/\<td class=\"WorksManageTableContent\"\>(.*?)\<\/td\>/", $resultaps, $curCount);
  $preCount = $curCount[1][0];
  curl_close($ch);
}

/**
 * Maps the defined vales to there defined keys.
 * Maps the Forms submitted data to the 3rd party form key.
 * Maps the Files submitted to the 3rd party form keys for files.
 * Then submits the information to the 3rd party form.
 * @param array $form_values
 */
function _submit_to_third_party(&$form_values) {
  $portal = _get_portal_config($form_values['details']['nid'], FALSE);
  #dpm($portal);
  //get the submitted values.
  $submitted_values = array();
  _get_subbmitted_values($submitted_values, $form_values['submitted']);
  #dpm("_get_subbmitted_values");
  #dpm($submitted_values);
  $tmp = explode('.', $portal['submission_url']);
  if (strcmp( 'php', $tmp[count($tmp) - 1]) == 0 ) {
    _post_to_php($portal, $submitted_values, $form_values['submitted']);
    drupal_set_message(t("The form was forwarded"));
  } else if (strcmp( 'aspx', $tmp[count($tmp) - 1]) == 0 ) {
    _post_to_aspx($portal, $submitted_values, $form_values['submitted']);
    drupal_set_message(t("The form was forwarded to ASP.NET"));
  } else {
    drupal_set_error(t("Error in forwarding to " . $portal['submission_url']));
  }
}

/**
 * Implementation of hook_form_submit.
 * 
 * Take the Webform Forwarding forms that pass validation
 * and submit them to imagenow system.
 * 
 * @param array $form_id
 * @param array $form_state
 */
function form_forwarding_form_validate($form, &$form_state) {
  if (form_get_errors()) {
    return;
  }
  _submit_to_third_party($form_state['values']);
}

/**
 * Rule to check if a node exists.
 */
function form_forwarding_validation_is_node($value) {
  $test_node = node_load($value);
  if ($test_node == false) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_fapi_validation_rules
 */
function form_forwarding_fapi_validation_rules() {
  return array(
    'is_node' => array(
      'callback' => 'form_forwarding_validation_is_node',
      'error_msg' => '%field - Must be a valid Node ID.'
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function form_forwarding_form_alter(&$form, &$form_state, $form_id) {
#dsm("Foo");
#dsm($form);
  if (!empty($form['details']['nid'])) {
    $tmp = _is_imagenow_form($form['details']['nid']['#value']);
    if ($tmp != NULL) {
      #dsm("Webform Forwarding Form");
      $form['#validate'][] = 'form_forwarding_form_validate';
    }
  }
}

/**
 * Takes an array that may have more arrays in it and returns a 2d array. 
 * This is to account for the use of field sets in a web form.
 * @param array $flat_array
 * @param array $array_in
 */
function _get_subbmitted_values(&$flat_array, $array_in) {
  foreach ($array_in as $key => $value) {
    if (is_array($value) == false) {
      $flat_array[$key] = $value;
    } else {
      _get_subbmitted_values($flat_array, $value);
    }
  }
}
